import HeaderMenu from '@components/HeaderMenu'
import PostList from '@components/PostList'
import { Button, Col, Drawer, message, Row } from 'antd'
import Head from 'next/head'
import Image from 'next/image'
import React from 'react'
import { useState } from 'react'
import { useEffect } from 'react'
import { getPosts } from "@Redux/actions/Post";
import { authenticate, checkServerSideCookie } from "@Redux/actions/authActions";
import { wrapper } from "@Redux/index";
import { connect } from "react-redux";
import { checkToken } from "@Api/AuthCheck";

function Home(props: any) {

  const [data, setData] = useState([]);

  useEffect(() => {
    getData();
    console.log(props.authentication)
  }, []);

  const getData = () => {
    getPosts(
      (success: any) => {
        setData(success);
      },
      (failed: any) => {
        message.error("Internal server error");
      },
      (error: any) => {
        message.error("Internal server error");
      }
    )
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
  
      <HeaderMenu token={props.authentication != null && props.authentication.token}></HeaderMenu>
      <div className="list-container">
        <Row>
          <Col offset="2" span="20">

            <h1>Posts</h1>
            <PostList list={data}></PostList>
          </Col>
        </Row>
      </div>

    </div>
  )
}

export const getServerSideProps = wrapper.getServerSideProps(
  async (context) => {
    checkServerSideCookie(context);
    const token = context.store.getState().authentication.token;

    if (!token) {
      return {
        props: {
          token: null,
          isLoggedIn: false,
        },
      };
    }

    try {
      const response: any = await checkToken(token);

      return {
        props: {
          token: token,
        },
      };
    } catch (err) {
      if (err.response.status == 401) {
        return {
          props: {
            token: null
          },
        };
      }
    }
  }
);

export default connect((state: any) => state, { authenticate })(Home);
